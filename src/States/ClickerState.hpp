// src/States/ClickerState.hpp

#pragma once

#include <raylib.h>

#include <memory>  // Для std::unique_ptr
#include <nlohmann/json.hpp>

#include "Components/Button.hpp"  // Подключаем наш новый компонент
#include "States/State.hpp"

class Application;
class StateManager;

/// @brief Состояние "Кликер".
/// Представляет собой отдельный экран приложения, где пользователь может нажимать
/// на кнопку для увеличения счетчика. Счетчик автоматически сохраняется при
/// выходе из состояния и загружается при входе.
class ClickerState final : public State
{
public:
    /// @brief Конструктор состояния "Кликер".
    /// Инициализирует все необходимые ресурсы, включая кнопку и счетчик.
    /// При создании объекта сразу же пытается загрузить предыдущий счет из файла.
    /// @param app Ссылка на главный класс приложения для доступа к общим ресурсам (шрифты и т.д.).
    /// @param stateManager Ссылка на менеджер состояний для возможности переключения состояний (например, возврата).
    ClickerState(Application &app, StateManager &stateManager);

    /// @brief Деструктор состояния "Кликер".
    /// Вызывается при выходе из состояния. Автоматически сохраняет текущий счет в файл.
    ~ClickerState() override;

    /// @brief Обрабатывает пользовательский ввод, не связанный с UI-компонентами.
    /// В данном состоянии отвечает за выход по кнопке Backspace.
    void HandleInput() override;

    /// @brief Обновляет логику состояния каждый кадр.
    /// Делегирует обновление UI-компонентам (кнопке) и увеличивает счетчик при нажатии.
    /// @param deltaTime Время, прошедшее с предыдущего кадра.
    void Update(float deltaTime) override;

    /// @brief Отрисовывает состояние на экране.
    /// Отвечает за отрисовку фона, UI-компонентов и текстовой информации (счетчик).
    void Draw() override;

private:
    /// @brief Текущее значение счетчика кликов.
    long long _clickCount;

    /// @brief Ссылка на главный объект приложения. Нужна для доступа к глобальным ресурсам, таким как шрифты.
    Application &_app;

    /// @brief Ссылка на менеджер состояний. Нужна для выполнения операций со стеком состояний (PopState).
    StateManager &_stateManager;

    /// @brief Умный указатель на кнопку "Кликер".
    /// Используется std::unique_ptr для автоматического управления памятью.
    std::unique_ptr<Button> _clickerButton;
};